{"version":3,"sources":["util.ts","Display.tsx","useWeather.ts","styles/global.ts","styles/components/MainView.ts","index.tsx","App.tsx"],"names":["kelvinToFahrenheit","kelvin","kelvinToCelcius","roundPlaces","num","places","exp","Math","pow","round","Display","apiresponse","location","useState","apiResponse","setApiResponse","useEffect","a","async","fetch","response","json","data","useWeather","undefined","message","cod","name","rel","href","weather","icon","main","description","humidity","wind","speed","temp","feels_like","temp_min","temp_max","src","alt","GlobalStyle","createGlobalStyle","MainView","styled","div","ReactDOM","render","setLocation","currentLocation","setCurrentLocation","placeholder","value","onChange","event","target","onKeyPress","key","onClick","document","getElementById"],"mappings":"wMACO,SAASA,EAAmBC,GAC/B,OAAiC,EAI9B,SAAyBA,GAC5B,OAAOA,EAAS,OALTC,CAAgBD,GAAc,EAAI,GAStC,SAASE,EAAYC,EAAaC,GACrC,IAAMC,EAAMC,KAAKC,IAAI,GAAIH,GACzB,OAAOE,KAAKE,MAAML,EAAME,GAAOA,E,oBCRpB,SAASI,EAAT,GAAsD,IAC3DC,ECAK,SAAoBC,GAAmB,IAAD,EACXC,qBADW,mBAC1CC,EAD0C,KAC7BC,EAD6B,KAYjD,OARAC,qBAAU,YAAY,qBAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACKE,MAAM,qDAAD,OAAsDP,EAAtD,kBARtB,sCAOY,cACZQ,EADY,kBAAAH,EAAA,MAGCG,EAASC,QAHV,OAGZC,EAHY,OAKlBP,EAAeO,GALG,0CAMhB,CAACV,IAEAE,EDZaS,CAD4C,EAAlCX,UAG9B,YAAoBY,IAAhBb,EAGI,oCACI,kBAAC,IAAD,KACI,8CAEJ,gDCS4Ba,IDJ5Bb,ECIgBc,QDDpB,oCACI,kBAAC,IAAD,KACI,0CAAgBd,EAAYe,MAEhC,kEAAwCf,EAAYe,KACpD,6BAAMf,EAAYc,UAMtB,oCACI,kBAAC,IAAD,KACI,+BAAQd,EAAYgB,KAApB,cACA,0BAAMC,IAAI,OAAOC,KAAI,2CAAsClB,EAAYmB,QAAQ,GAAGC,KAA7D,cAEzB,6BACI,yCAAepB,EAAYmB,QAAQ,GAAGE,MACtC,6CAAmBrB,EAAYmB,QAAQ,GAAGG,aAC1C,0CAAgBtB,EAAYqB,KAAKE,SAAjC,KACA,4CAAkB/B,ED1BT,MC0BmDQ,EAAYwB,KAAKC,MAAQ,GAArF,eACA,sCAAYjC,EAAYH,EAAmBW,EAAYqB,KAAKK,MAAO,GAAnE,SACA,4CAAkBlC,EAAYH,EAAmBW,EAAYqB,KAAKM,YAAa,GAA/E,SACA,0CAAgBnC,EAAYH,EAAmBW,EAAYqB,KAAKO,UAAW,GAA3E,SACA,0CAAgBpC,EAAYH,EAAmBW,EAAYqB,KAAKQ,UAAW,GAA3E,SACA,0CAAgB7B,EAAYgB,MAC5B,yBAAKc,IAAG,2CAAsC9B,EAAYmB,QAAQ,GAAGC,KAA7D,WAA4EW,IAAK/B,EAAYmB,QAAQ,GAAGG,gB,2hBE/CpI,IAkBeU,EAlBKC,YAAH,K,+GCAV,IAAMC,EAAWC,IAAOC,IAAV,KCIrBC,IAASC,OAED,oCACI,kBAAC,EAAD,MACA,kBAACJ,EAAD,KACI,mBCPD,WAAgB,IAAD,EACMhC,mBAAS,IADf,mBACnBD,EADmB,KACTsC,EADS,OAEoBrC,mBAAS,IAF7B,mBAEnBsC,EAFmB,KAEFC,EAFE,KAI1B,OACI,6BACI,6BACI,2BAAOC,YAAY,WAAWC,MAAO1C,EAAU2C,SAAU,SAACC,GAAD,OAAWN,EAAYM,EAAMC,OAAOH,QAAQI,WAAY,YAAyB,UAAd,EAATC,KAAgCP,EAAmBxC,MACtK,4BAAQgD,QAAS,kBAAMR,EAAmBxC,KAA1C,WAEJ,kBAACF,EAAD,CAASE,SAAUuC,ODHf,QAIZU,SAASC,eAAe,W","file":"static/js/main.ac00f4c3.chunk.js","sourcesContent":["/** Convert kelvin to fahrenheit */\nexport function kelvinToFahrenheit(kelvin: number): number {\n    return kelvinToCelcius(kelvin) * 9 / 5 + 32;\n}\n\n/** Convert kelvin to celcius */\nexport function kelvinToCelcius(kelvin: number): number {\n    return kelvin - 272.15;\n}\n\n/** Rounds the given number to the specific number of places */\nexport function roundPlaces(num: number, places: number): number {\n    const exp = Math.pow(10, places);\n    return Math.round(num * exp) / exp;\n}\n\nexport function metersPerSecondToMilesPerHour(metersPerSecond: number): number {\n    return metersPerSecond * 2.237;\n}","import React from \"react\";\nimport useWeather, { isError } from \"./useWeather\";\nimport { roundPlaces, metersPerSecondToMilesPerHour, kelvinToFahrenheit } from \"./util\";\nimport Helmet from \"react-helmet\";\n\nexport default function Display({ location }: { location: string }) {\n    const apiresponse = useWeather(location);\n\n    if (apiresponse === undefined) {\n        // No data screen\n        return (\n            <>\n                <Helmet>\n                    <title>Loading...</title>\n                </Helmet>\n                <h1>Loading...</h1>\n            </>\n        );\n    }\n\n    if (isError(apiresponse)) {\n        // Error screen\n        return (\n            <>\n                <Helmet>\n                    <title>Error - {apiresponse.cod}</title>\n                </Helmet>\n                <h1>Error in fetching openweather API: {apiresponse.cod}</h1>\n                <pre>{apiresponse.message}</pre>\n            </>\n        )\n    } else {\n        // Success screen\n        return (\n            <>\n                <Helmet>\n                    <title>{apiresponse.name}'s Weather</title>\n                    <link rel=\"icon\" href={`http://openweathermap.org/img/wn/${apiresponse.weather[0].icon}@2x.png`}/>\n                </Helmet>\n                <div>\n                    <div>Weather: {apiresponse.weather[0].main}</div>\n                    <div>Description: {apiresponse.weather[0].description}</div>\n                    <div>Humidity: {apiresponse.main.humidity}%</div>\n                    <div>Wind Speed: {roundPlaces(metersPerSecondToMilesPerHour(apiresponse.wind.speed), 2)} miles/hour</div>\n                    <div>Temp: {roundPlaces(kelvinToFahrenheit(apiresponse.main.temp), 2)}&deg;F</div>\n                    <div>Feels Like: {roundPlaces(kelvinToFahrenheit(apiresponse.main.feels_like), 2)}&deg;F</div>\n                    <div>Min Temp: {roundPlaces(kelvinToFahrenheit(apiresponse.main.temp_min), 2)}&deg;F</div>\n                    <div>Max Temp: {roundPlaces(kelvinToFahrenheit(apiresponse.main.temp_max), 2)}&deg;F</div>\n                    <div>Location: {apiresponse.name}</div>\n                    <img src={`http://openweathermap.org/img/wn/${apiresponse.weather[0].icon}@2x.png`} alt={apiresponse.weather[0].description}/>\n                </div>\n                {/* <pre>{JSON.stringify(apiresponse, undefined, 4)}</pre> */}\n            </>\n        );\n    }\n}","import { useEffect, useState } from \"react\";\n\n/** APPID for openweather map */\nconst APPID = \"3641e4dc0ad8580be2a1f8a82fa268a2\";\n\n/** React hook for weather api */\nexport default function useWeather(location: string) {\n    const [apiResponse, setApiResponse] = useState<ICurrentWeather | IWeatherError>();\n\n    // Fetch API Data\n    useEffect(() => void (async () => {\n        const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${location}&APPID=${APPID}`);\n\n        const data = await response.json();\n\n        setApiResponse(data);\n    })(), [location]);\n\n    return apiResponse;\n}\n\n/** Type guard for the Weather data type */\nexport function isError(w: ICurrentWeather | IWeatherError): w is IWeatherError {\n    // tslint:disable-next-line: strict-type-predicates\n    return (w as IWeatherError).message !== undefined;\n}\n\n/** Defines weather for a location */\nexport interface ICurrentWeather {\n    /** City geo location */\n    coord: {\n        /** City geo location, longitude */\n        lon: number;\n        /** City geo location, latitude */\n        lat: number;\n    };\n    /** Weather data */\n    weather: Array<{\n        /** Weather condition id */\n        id: number;\n        /**  Group of weather parameters (Rain, Snow, Extreme etc.) */\n        main: string;\n        /** Weather condition within the group. */\n        description: string;\n        /** Weather icon id */\n        icon: string;\n    }>,\n    /** Main weather information */\n    main: {\n        /** Temperature. Unit Default: Kelvin, Metric: Celsius, Imperial: Fahrenheit. */\n        temp: number;\n        /** Temperature. This temperature parameter accounts for the human perception of weather. Unit Default: Kelvin, Metric: Celsius, Imperial: Fahrenheit.  */\n        feels_like: number;\n        /** Minimum temperature at the moment. This is deviation from current temp that is possible for large cities and megalopolises geographically expanded (use these parameter optionally). Unit Default: Kelvin, Metric: Celsius, Imperial: Fahrenheit. */\n        temp_min: number;\n        /**  Maximum temperature at the moment. This is deviation from current temp that is possible for large cities and megalopolises geographically expanded (use these parameter optionally). Unit Default: Kelvin, Metric: Celsius, Imperial: Fahrenheit. */\n        temp_max: number;\n        /** Atmospheric pressure (on the sea level, if there is no sea_level or grnd_level data), hPa */\n        pressure: number;\n        /** Humidity, % */\n        humidity: number;\n    };\n    /** Visibility, meters */\n    visibility: number;\n    /** Wind speed and direction */\n    wind: {\n        /** Wind speed. Unit Default: meter/sec, Metric: meter/sec, Imperial: miles/hour. */\n        speed: number;\n        /** Wind direction, degrees (meteorological) */\n        deg: number;\n    };\n    /** Snow volume */\n    snow?: {\n        /** Snow volume for the last 1 hour, mm */\n        \"1h\": number;\n        /** Snow volume for the last 3 hours, mm */\n        \"3h\": number;\n    };\n    /** Rain volume */\n    rain?: {\n        /** Rain volume for the last 1 hour, mm */\n        \"1h\": number;\n        /** Rain volume for the last 3 hours, mm */\n        \"3h\": number;\n    };\n    /** Cloudiness */\n    clouds?: {\n        /** Cloudiness, % */\n        all: number;\n    };\n    /** Time of data calculation, unix, UTC  */\n    dt: number;\n    /** Extra info */\n    sys: {\n        /** Country code (GB, JP etc.) */\n        country: string;\n        /** Sunrise time, unix, UTC */\n        sunrise: number;\n        /** Sunset time, unix, UTC */\n        sunset: number;\n    };\n    timezone: number;\n    /** City ID */\n    id: number;\n    /** City name */\n    name: string;\n}\n\n/** An error returned by openweather */\nexport interface IWeatherError {\n    /** An error code */\n    cod: string;\n    /** The error discription */\n    message: string;\n}","import { createGlobalStyle } from \"styled-components\";\n\nconst GlobalStyle = createGlobalStyle`\nbody, html, #root {\n    margin: 0;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n      'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n      sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    height: 100%;\n    overflow: hidden;\n}\n\ncode {\n    font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n      monospace;\n}\n`;\n\nexport default GlobalStyle;\n","import styled from \"styled-components\";\n\nexport const MainView = styled.div`\n    height: 100%;\n    overflow: auto;\n`;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport GlobalStyle from \"./styles/global\";\nimport { MainView } from \"./styles/components/MainView\";\n\nReactDOM.render(\n    (\n        <>\n            <GlobalStyle />\n            <MainView>\n                <App />\n            </MainView>\n        </>\n    ),\n    document.getElementById(\"root\")\n);\n","import React, { useState } from \"react\";\nimport Display from \"./Display\";\n\n/** The main app */\nexport default function App() {\n    const [location, setLocation] = useState(\"\");\n    const [currentLocation, setCurrentLocation] = useState(\"\");\n\n    return (\n        <div>\n            <div>\n                <input placeholder=\"Location\" value={location} onChange={(event) => setLocation(event.target.value)} onKeyPress={({key}) => { if (key === \"Enter\") setCurrentLocation(location)}}/>\n                <button onClick={() => setCurrentLocation(location)}>Search</button>\n            </div>\n            <Display location={currentLocation}/>\n        </div>\n    )\n}\n"],"sourceRoot":""}